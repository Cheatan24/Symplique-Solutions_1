Below are the Steps we can follow for the Cost Optimization Challenge :-

Step 1:-Archive Old Records: Move records older than three months to Azure Blob Storage to reduce the size and cost of your Cosmos DB.

Step 2:-Create a Hybrid Access Layer: Develop a service that can retrieve data from both Cosmos DB and Blob Storage without changing your existing APIs.

Step3:-Update Read Logic: Adjust your read operations to first check Cosmos DB. If the data isn't there, then fetch it from Blob Storage.

Step4:-Automate Archiving: Set up a scheduled task to regularly move old records from Cosmos DB to Blob Storage.
*****************************************************************************************************************************************************************************
Detailed Implement : -
Step 1: Identify and Archive Old Records
Create a function to move records older than three months to Azure Blob Storage.

Step 2: Implement a Hybrid Storage Access Layer
Create a service to fetch records from both Cosmos DB and Blob Storage.

Step 3: Update the Read Logic
Modify your existing read logic to use the BillingRecordService.

Step 4: Automate the Archiving Process
Set up a scheduled job using Azure Functions or Azure Logic Apps to periodically move old records.

********************************************************************************************************************************************************************************

Deployment:-
1. Deploy the archiving function to Azure Functions.
2.Deploy the hybrid storage access layer as part of your existing service.
3.Schedule the archiving function to run periodically using Azure Logic Apps or Azure Functions Timer Trigger.

******************************************************************************************************
1. Data Archival
Function: archive_old_records

Initialize Cosmos DB client
Initialize Blob Storage client

Define function archive_old_records:
    Query Cosmos DB for records older than 3 months
    For each record in the query result:
        Convert record to JSON
        Upload JSON to Blob Storage
        Delete record from Cosmos DB
2. Data Retrieval
Function: get_record
Initialize Cosmos DB client
Initialize Blob Storage client

Define function get_record(record_id):
    Try to read record from Cosmos DB
    If record is found:
        Return record
    Else:
        Try to read record from Blob Storage
        If record is found:
            Return record
        Else:
            Return "Record not found"

Cost Optimization Strategies:-
1.Tiered Storage: Use Azure Blob Storage for older records to reduce costs.
2.Scheduled Archival: Automate the archival process using Azure Functions or Logic Apps to periodically move old records.
3.Hybrid Access Layer: Implement a service that can fetch records from both Cosmos DB and Blob Storage seamlessly.


Deployment steps : 
Steps:-

1.Initialize Terraform:

terraform init

2. Apply the Configuration:

terraform apply

3.Deploy the Python Function:

func azure functionapp publish <your-function-app-name>


4.Set Environment Variables:

COSMOS_ENDPOINT
COSMOS_KEY
BLOB_CONNECTION_STRING


I utilized GitHub Copilot to assist in generating the solution for the  project. The tool provided code suggestions and helped streamline the development process, ensuring that the solution met the specified requirements efficiently.
